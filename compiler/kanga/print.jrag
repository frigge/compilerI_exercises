aspect PrettyPrint {
  public class PrettyPrinter {
    public static String INDENT = "  ";
    public static String LABEL_INDENT = "   ";
    
  	private StringBuilder sb;
  	public PrettyPrinter(){
  		sb = new StringBuilder();
  	}
  
    public PrettyPrinter append(String s) {
       sb.append(s);
       return this;
    }
    
    public String getString() {
       return sb.toString();
    }
}

  //similar to JastAdd Java compiler	
  syn String ASTNode.indent() {
        String indent = extractIndent();
        return indent.startsWith("\n") ? indent : ("\n" + indent);
  }

    syn String ASTNode.extractIndent() {
  	  if(getParent() == null)
   		   return "";
      String indent = getParent().extractIndent();
      if(getParent().addsIndentationLevel())
      	indent += PrettyPrinter.INDENT;
      return indent;
  }

  syn boolean ASTNode.addsIndentationLevel() = false;
  eq Program.addsIndentationLevel() = true;
  eq LabeledStmt.addsIndentationLevel() = true;
  eq Procedure.addsIndentationLevel() = true;

  syn lazy PrettyPrinter Program.printer() {
  	return new PrettyPrinter();
  }
  eq Program.getStmts().printer() = this.printer();
  eq Program.getProcs().printer() = this.printer();
  
  inh lazy PrettyPrinter LabeledStmt.printer();
  inh lazy PrettyPrinter Procedure.printer();
  inh lazy PrettyPrinter Stmt.printer();
  inh lazy PrettyPrinter Exp.printer();
  inh lazy PrettyPrinter Label.printer();
  inh lazy PrettyPrinter Reg.printer();
  inh lazy PrettyPrinter SpilledArg.printer();
  
  syn PrettyPrinter Program.print() {
    printer().append("MAIN");
    printer().append("[").append(""+getArguments()).append("]");
    printer().append("[").append(""+getStackSlots()).append("]");
    printer().append("[").append(""+getMaxCallArgs()).append("]");
    printer().append("\n");
    for (LabeledStmt s : getStmtss()) s.print();
    printer().append("\nEND\n");
    for (Procedure p : getProcss()) p.print();
    return printer();
  }

  public void LabeledStmt.print() {
    printer().append(indent());
    if (hasLabel()) {
    		getLabel().print();
    		printer().append(" ");
    } else {
    		printer().append(PrettyPrinter.LABEL_INDENT);
    }
  	getStmt().print();
  }  
 
  public void Procedure.print() {
  	getLabel().print();
    printer().append("[").append(""+getArguments()).append("]");
    printer().append("[").append(""+getStackSlots()).append("]");
    printer().append("[").append(""+getMaxCallArgs()).append("]");
    for (LabeledStmt s : getStmtss()) s.print();
  	printer().append("\nEND \n");
  }
  
  public abstract void Stmt.print();
  public void Noop.print() {
  	printer().append("NOOP");
  }
  public void Err.print() {
  	printer().append("ERROR");
  }
  public void CJump.print() {
  	printer().append("CJUMP ");
  	getCond().print();
  	printer().append(" ");
  	getLabel().print();
  }
  public void Jump.print() {
  	printer().append("JUMP ");
  	getLabel().print();
  }
  public void HStore.print() {
  	printer().append("HSTORE ");
  	getAddr().print();
  	printer().append(" " + getOffset().toString() + " ");
  	getValue().print();
  }
  public void HLoad.print() {
  	printer().append("HLOAD ");
  	getDest().print();
  	printer().append(" ");
  	getAddr().print();
  	printer().append(" " + getOffset().toString());
  }
  public void Move.print() {
  	printer().append("MOVE ");
  	getDest().print();
  	printer().append(" ");
  	getSource().print();
  }
  public void Print.print() {
  	printer().append("PRINT ");
  	getValue().print();
  }
  public void ALoad.print() {
    printer().append("ALOAD ");
    getDest().print();    
  	printer().append(" ");
  	getValue().print();
  }	 
  public void AStore.print() {
    printer().append("ASTORE ");
    getDest().print();    
  	printer().append(" ");
  	getValue().print();
  }	 
  public void PassArg.print() {
    printer().append("PASSARG ");
    printer().append(""+getNumber());    
  	printer().append(" ");
  	getValue().print();
  }	 
  public void Call.print() {
    printer().append("CALL ");
    getName().print();    
  }	 
  
  public abstract void Exp.print();
  public void HAlloc.print() {
  	printer().append("HALLOCATE ");
  	getSize().print();
  }
  public void LabelExp.print() {
  	getLabel().print();
  }
  public void Lt.print() {
    printer().append("LT ");
  	getLeft().print();
  	printer().append(" ");
  	getRight().print();
  }
  public void Plus.print() {
    printer().append("PLUS ");
  	getLeft().print();
  	printer().append(" ");
  	getRight().print();
  }
  public void Minus.print() {
    printer().append("MINUS ");
  	getLeft().print();
  	printer().append(" ");
  	getRight().print();
  }
  public void Times.print() {
    printer().append("TIMES ");
  	getLeft().print();
  	printer().append(" ");
  	getRight().print();
  }
  public void RegExp.print() {
  	getReg().print();
  }
  public void IntLiteral.print() {
  	printer().append(getInteger().toString());
  } 
  public void Label.print() {
  	printer().append(getLabel());
  }
  public void SpilledArg.print() {
  	printer().append("SPILLEDARG "+getNumber());
  }
  public void Reg.print() {
  	printer().append(getClass().getSimpleName().toLowerCase());
  }
  
    public String Program.toString() {StringBuilder b = new StringBuilder();
    b.append("MAIN\n");
    for (LabeledStmt s : getStmtss()) b.append(s.toString());
    b.append("\nEND\n");
    for (Procedure p : getProcss()) b.append(p.toString());
    return b.toString();
  }

  public String LabeledStmt.toString() {StringBuilder b = new StringBuilder();
    b.append(indent());
    if (hasLabel()) {
    		b.append(getLabel().toString());
    		b.append(" ");
    } else {
    }
  	b.append(getStmt().toString());
    return b.toString();
  }  
 
  public String Procedure.toString() {StringBuilder b = new StringBuilder();
  	b.append(getLabel().toString());
  	b.append(" [" + getArguments().toString() +"] ");
    for (LabeledStmt s : getStmtss()) b.append(s.toString());
  	b.append("\n");
    return b.toString();
  }
  
  public abstract String Stmt.toString();
  public String Noop.toString() {StringBuilder b = new StringBuilder();
  	b.append("NOOP");
    return b.toString();
  }
  public String Err.toString() {StringBuilder b = new StringBuilder();
  	b.append("ERROR");
    return b.toString();
  }
  public String CJump.toString() {StringBuilder b = new StringBuilder();
  	b.append("CJUMP ");
  	b.append(getCond().toString());
  	b.append(" ");
  	b.append(getLabel().toString());
    return b.toString();
  }
  public String Jump.toString() {StringBuilder b = new StringBuilder();
  	b.append("JUMP ");
  	b.append(getLabel().toString());
    return b.toString();
  }
  public String HStore.toString() {StringBuilder b = new StringBuilder();
  	b.append("HSTORE ");
  	b.append(getAddr().toString());
  	b.append(" " + getOffset().toString() + " ");
  	b.append(getValue().toString());
    return b.toString();
  }
  public String HLoad.toString() {StringBuilder b = new StringBuilder();
  	b.append("HLOAD ");
  	b.append(getDest().toString());
  	b.append(" ");
  	b.append(getAddr().toString());
  	b.append(" " + getOffset().toString());
    return b.toString();
  }
  public String Move.toString() {StringBuilder b = new StringBuilder();
  	b.append("MOVE ");
  	b.append(getDest().toString());
  	b.append(" ");
  	b.append(getSource().toString());
    return b.toString();
  }
  public String Print.toString() {StringBuilder b = new StringBuilder();
  	b.append("PRINT ");
  	b.append(getValue().toString());
    return b.toString();
  }
  public String ALoad.toString() {StringBuilder b = new StringBuilder();
    b.append("ALOAD ");
    b.append(getDest().toString());    
  	b.append(" ");
  	b.append(getValue().toString());
  	return b.toString();
  }	 
  public String AStore.toString() {StringBuilder b = new StringBuilder();
    b.append("ASTORE ");
    b.append(getDest().toString());    
  	b.append(" ");
  	b.append(getValue().toString());
  	return b.toString();
  }	 
  public String PassArg.toString() {StringBuilder b = new StringBuilder();
    b.append("PASSARG ");
    b.append(getNumber().toString());    
  	b.append(" ");
  	b.append(getValue().toString());
  	return b.toString();
  }	 
  public String Call.toString() {StringBuilder b = new StringBuilder();
    b.append("CALL ");
    b.append(getName().toString());   
    return b.toString();
  }	 
  
  public abstract String Exp.toString();
  public String HAlloc.toString() {StringBuilder b = new StringBuilder();
  	b.append("HALLOCATE ");
  	b.append(getSize().toString());
    return b.toString();
  }
  public String LabelExp.toString() {StringBuilder b = new StringBuilder();
  	b.append(getLabel().toString());
    return b.toString();
  }
  public String Lt.toString() {StringBuilder b = new StringBuilder();
    b.append("LT ");
  	b.append(getLeft().toString());
  	b.append(" ");
  	b.append(getRight().toString());
    return b.toString();
  }
  public String Plus.toString() {StringBuilder b = new StringBuilder();
    b.append("PLUS ");
  	b.append(getLeft().toString());
  	b.append(" ");
  	b.append(getRight().toString());
    return b.toString();
  }
  public String Minus.toString() {StringBuilder b = new StringBuilder();
    b.append("MINUS ");
  	b.append(getLeft().toString());
  	b.append(" ");
  	b.append(getRight().toString());
    return b.toString();
  }
  public String Times.toString() {StringBuilder b = new StringBuilder();
    b.append("TIMES ");
  	b.append(getLeft().toString());
  	b.append(" ");
  	b.append(getRight().toString());
    return b.toString();
  }
  public String RegExp.toString() {
  	return getReg().toString();
  }
  public String IntLiteral.toString() {StringBuilder b = new StringBuilder();
  	b.append(getInteger().toString());
    return b.toString();
  } 
  public String Label.toString() {StringBuilder b = new StringBuilder();
  	b.append(getLabel());
    return b.toString();
  }
  public String SpilledArg.toString() {
  	return ""+getNumber();
  }
  public String Reg.toString() {
  	return getClass().getSimpleName().toLowerCase();
  }
}

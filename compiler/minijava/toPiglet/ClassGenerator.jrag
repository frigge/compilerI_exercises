import java.lang.Integer;

aspect ClassGeneration{
	syn lazy ClassGenerator Program.classGen() {
		return new ClassGenerator();
	}
	eq Program.getMain().classGen() = this.classGen();
	eq Program.getDecls().classGen() = this.classGen();
	eq Decl.getIdent().classGen() = this.classGen();
	  
	inh lazy ClassGenerator Decl.classGen();
	inh lazy ClassGenerator Statement.classGen();
	inh lazy ClassGenerator Exp.classGen();
	inh lazy ClassGenerator Type.classGen();
	inh lazy ClassGenerator Op.classGen();
	inh lazy ClassGenerator Id.classGen();
	
	public class ClassGenerator{
		private java.util.Map<ClassDecl,ClassInfos> varPositions = new java.util.HashMap<ClassDecl,ClassInfos>();
		private java.util.Map<Integer,ClassDecl> classDeclPos = new java.util.HashMap<Integer, ClassDecl>();
		private ClassDecl currentClass = null;
		private int nextPos = 0;
	
		public void build(ClassDecl c) {
			ClassInfos infos = new ClassInfos();
			int position = nextPos++;
			classDeclPos.put(position,c);
			infos.position = position;
			varPositions.put(c, infos);
			java.util.Map<VarDecl, Integer> varInfos = new java.util.HashMap<VarDecl, Integer>();
			infos.varPos = varInfos;

			java.util.Map<MethodDecl, Integer> methodPos = new java.util.HashMap<MethodDecl, Integer>();
			infos.methodPos = methodPos;


			buildLocalInfos(infos, c);
		}

		public int size(){
			return varPositions.size();
		}

		public ClassDecl getClassAtPos(int p){
			return classDeclPos.get(p);
		}
		

		public int getClassOffset(ClassDecl c){
			return varPositions.get(c).position;
		}
		
		private void buildLocalInfos(ClassInfos i, ClassDecl c){
			java.util.List<ClassDecl> superTypes = new java.util.ArrayList<ClassDecl>();
			ClassDecl h = c;
			while(h != null){
				superTypes.add(0,h);
				h = h.superClass();
			}
			buildLocalVars(i.varPos, superTypes);
			buildMethods(i.methodPos, superTypes);
		}
		
		private void buildLocalVars(java.util.Map<VarDecl,Integer> infos, java.util.List<ClassDecl> superTypes){
			int pos = 1;
			ClassDecl h;
			for(int i = 0; i < superTypes.size(); i++){
				h = superTypes.get(i);
				for(VarDecl v: h.getVariabless()){
					infos.put(v,pos*4);
					pos++;
				}
			}
		}
		
		private void buildMethods(java.util.Map<MethodDecl,Integer> infos, java.util.List<ClassDecl> superTypes){
			int pos = 0;
			ClassDecl h;
			for(int i = 0; i < superTypes.size(); i++){
				h = superTypes.get(i);
				for(MethodDecl m: h.getMethodss()){
					int foundPos = -1;
					MethodDecl oldDecl = null;
					for(java.util.Map.Entry<MethodDecl, Integer> entry: infos.entrySet())
					{
						if(entry.getKey().getIdent().getIdent().equals(m.getIdent().getIdent())){
							foundPos = entry.getValue();
							oldDecl = entry.getKey();
							break;
						}
					}
					if(foundPos != -1){
						infos.remove(oldDecl);
						infos.put(m,foundPos);
					} else {
						infos.put(m,pos);
						pos++;
					}
				}
			}
		}
		
		public void openScp(ClassDecl c){
			currentClass = c;
		}
		
		public void closeScp(){
			currentClass = null;
		}
	
		public int lookup(VarDecl v){
			return varPositions.get(currentClass).varPos.get(v);
		}
	
		public int lookup(MethodDecl m){
			return varPositions.get(currentClass).methodPos.get(m);
		}
		
		public int lookup(ClassDecl c, VarDecl v){
			return varPositions.get(c).varPos.get(v);
		}
	
		public int lookup(ClassDecl c, MethodDecl m){
			return varPositions.get(c).methodPos.get(m);
		}
		
		public int getObjectSize(ClassDecl c){
			return varPositions.get(c).varPos.size();
		}

		public java.util.Set<java.util.Map.Entry<MethodDecl,Integer>> methods(ClassDecl c){
			return varPositions.get(c).methodPos.entrySet();
		}
		private class ClassInfos{
			int position;
			java.util.Map<VarDecl,Integer> varPos;
			java.util.Map<MethodDecl,Integer> methodPos;
		}
	}
}
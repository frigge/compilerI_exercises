aspect lookupTable{
	public class Lookup {
		private java.util.Map<LookupIdentification, Decl> lookupTable;
		private ClassDecl nesting;
		
		public Lookup(){
			lookupTable =  new java.util.HashMap<LookupIdentification, Decl>();
		}
		
		public void incNL(ClassDecl nesting){
			this.nesting = nesting;
		}
		
		public void decNL(){
			this.nesting = null;
		}
		
		public CompilationError enter(Decl decl){
			LookupIdentification li = LookupIdentification.liFactory(nesting,decl);
			CompilationError result = null;
			if(lookupTable.get(li) == null){
				lookupTable.put(li, decl);
			} else {
				result = new CompilationError(li.getName()+" in line " +decl.getFirstLine()+ " does already exist");
			}
			return result;
		}
		
		public ClassDecl lookupClass(String name){
			return (ClassDecl) lookupTable.get(new ClassLookupIdentification(name));
		}
		public ClassDecl lookupClass(Type t){
			return lookupClass(t.typeValue());
		}
		public ClassDecl lookupClass(Id i){
			return lookupClass(i.getIdent());
		}
		public VarDecl lookupVar(Type t, Id i){
			VarDecl result = null;
			while(t != null && result == null){
				result = (VarDecl) lookupTable.get(new VarLookupIdentification(lookupClass(t), i.getIdent()));
				t = t.supertype();
			}
			return result;
		}
		
		public Decl lookupMethod(ClassDecl nesting, String name, List<Type> params){
			try{
				IdType t = new IdType(nesting.getFirstLine(), nesting.getIdent().clone());
				t.setParent(nesting);
				return lookupMethod(t,name,params);		
			} catch (CloneNotSupportedException e){
				throw new UnsupportedOperationException("",e);
			}
		}
		
		public Decl lookupMethod(Type nesting, String name, List<Type> params){
			while(nesting != null){
				MethodDecl d = (MethodDecl) lookupTable.get(new MethodLookupIdentification(lookupClass(nesting), name, params));
				if(d != null){
					List<VarDecl> foundParams = d.getParamss();
					boolean allRight = true;
					for (int i = 0; i < foundParams.numChildren() && allRight; i++) {
						VarDecl v = foundParams.getChild(i);
						Type foundParameter = v.getT();
						Type givenParam = params.getChild(i);
						if(!givenParam.instanceOf(foundParameter)){
							allRight = false;
						}
					}
					if(allRight){
						return d;
					}
				} 
				nesting = nesting.supertype();
				
			}
			return null;		
		}
	}
	
	public abstract class LookupIdentification{
		public static LookupIdentification liFactory(ClassDecl prefix, Decl decl){
			if(decl instanceof ClassDecl || decl instanceof MainClass){
				return new ClassLookupIdentification(decl);
			} else if(decl instanceof MethodDecl){
				return new MethodLookupIdentification(prefix,(MethodDecl) decl);
			} else if(decl instanceof VarDecl){
				return new VarLookupIdentification(prefix,(VarDecl) decl);
			} else {
				return null;
			}
		}
		
		public abstract String getName();
	}
	
	public class ClassLookupIdentification extends LookupIdentification{
		private String name;
		
		public ClassLookupIdentification(Decl decl){
			name = CharConsts.getClassName(decl);
		}
		public ClassLookupIdentification(String name){
			this.name = CharConsts.getClassName(name);
		}
		
		@Override
		public String getName(){
			return name;
		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + ((name == null) ? 0 : name.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			ClassLookupIdentification other = (ClassLookupIdentification) obj;
			if (name == null) {
				if (other.name != null)
					return false;
			} else if (!name.equals(other.name))
				return false;
			return true;
		}
	}
	
	public class MethodLookupIdentification extends LookupIdentification{
		String name;
		ClassDecl nesting;
		
		public MethodLookupIdentification(ClassDecl nesting, MethodDecl decl){
			this.nesting = nesting;
			this.name = CharConsts.getClassName(nesting) + CharConsts.ELEMENT_SEPERATOR + CharConsts.getMethodName(decl);
		}
		
		public MethodLookupIdentification(ClassDecl nesting, String name, List<Type> params){
			this.name = CharConsts.getClassName(nesting) + CharConsts.ELEMENT_SEPERATOR + CharConsts.getMethodName(name);
			this.nesting = nesting;
		}


		@Override
		public String getName(){
			StringBuilder b = new StringBuilder();
			b.append(name).append("(");
			b.append(")");
			return b.toString();
		}
		
		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + ((name == null) ? 0 : name.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			MethodLookupIdentification other = (MethodLookupIdentification) obj;
			if (name == null) {
				if (other.name != null)
					return false;
			} else if (!name.equals(other.name))
				return false;
			if (nesting == null) {
				if (other.nesting != null)
					return false;
			} else if (!nesting.equals(other.nesting))
				return false;
			return true;
		}
	}
	
	public class VarLookupIdentification extends LookupIdentification{
		String name;
		ClassDecl nesting;
		
		public VarLookupIdentification(ClassDecl nesting, VarDecl decl){
			this.nesting = nesting;
			this.name = decl.getIdent().getIdent();
		}
		
		public VarLookupIdentification(ClassDecl nesting, String name){
			this.name = name;
			this.nesting = nesting;
		}


		@Override
		public String getName(){
			return name;
		}
		
		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + ((name == null) ? 0 : name.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			VarLookupIdentification other = (VarLookupIdentification) obj;
			if (name == null) {
				if (other.name != null)
					return false;
			} else if (!name.equals(other.name))
				return false;
			if (nesting == null) {
				if (other.nesting != null)
					return false;
			} else if (!nesting.equals(other.nesting))
				return false;
			return true;
		}
	}
}